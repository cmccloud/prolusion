# -*- mode: snippet; require-final-newline: nil -*-
# name: root
# --

## Version: $Id$
##
######################################################################
##
### Commentary:
##
######################################################################
##
### Change Log:
##
######################################################################
##
### Code:

cmake_minimum_required(VERSION 2.8.12)

######################################################################

project($1)

## ###################################################################
## Version setup
## ###################################################################

set(\${PROJECT_NAME}_VERSION_MAJOR 0)
set(\${PROJECT_NAME}_VERSION_MINOR 0)
set(\${PROJECT_NAME}_VERSION_PATCH 1)
set(\${PROJECT_NAME}_VERSION
  \${\${PROJECT_NAME}_VERSION_MAJOR}.\${\${PROJECT_NAME}_VERSION_PATCH}.\${\${PROJECT_NAME}_VERSION_PATCH})

## ###################################################################
## Path setup
## ###################################################################

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \${PROJECT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \${PROJECT_BINARY_DIR}/bin)

## #################################################################
## Install prefix
## #################################################################

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "\${CMAKE_SOURCE_DIR}/install" CACHE PATH "\${PROJECT_NAME} install prefix" FORCE)
endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

## ###################################################################
## Build setup
## ###################################################################

set(CMAKE_AUTOMOC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

include(GNUInstallDirs)
include(GenerateExportHeader)

if(APPLE)
  set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -std=c++11 -I/usr/lib/c++/v1")
else(APPLE)
  set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -std=c++0x")
endif(APPLE)

if(NOT APPLE)
  set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas")
else(NOT APPLE)
  set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS}")
endif(NOT APPLE)

if(CMAKE_SIZEOF_VOID_P MATCHES 8)
    set(\${PROJECT_NAME}_PLATFORM_64 1)
else(CMAKE_SIZEOF_VOID_P MATCHES 8)
    set(\${PROJECT_NAME}_PLATFORM_32 1)
endif(CMAKE_SIZEOF_VOID_P MATCHES 8)

## ###################################################################
## Test setup
## ###################################################################

enable_testing()

## #################################################################
## Options
## #################################################################

# option(\${PROJECT_NAME}_BUILD_XXX "XXX" false)

## #################################################################
## Dependencies - external
## #################################################################

find_package(Qt5Core REQUIRED)

## #################################################################
## Dependencies - internal
## #################################################################

include_directories(\${CMAKE_BINARY_DIR})
include_directories(\${CMAKE_SOURCE_DIR}/src)

## ###################################################################
## Input
## ###################################################################

$0

add_subdirectory(src)
add_subdirectory(app)

## ###################################################################
## Exporting
## ###################################################################

export(PACKAGE \${PROJECT_NAME})

configure_file(\${CMAKE_SOURCE_DIR}/cmake/\${PROJECT_NAME}Config.cmake.in
  "\${CMAKE_BINARY_DIR}/\${PROJECT_NAME}Config.cmake" @ONLY)
configure_file(\${CMAKE_SOURCE_DIR}/cmake/\${PROJECT_NAME}ConfigVersion.cmake.in
  "\${CMAKE_BINARY_DIR}/\${PROJECT_NAME}ConfigVersion.cmake" @ONLY)

install(FILES
  "\${CMAKE_BINARY_DIR}/\${PROJECT_NAME}Config.cmake"
  "\${CMAKE_BINARY_DIR}/\${PROJECT_NAME}ConfigVersion.cmake"
  DESTINATION cmake)

install(EXPORT \${PROJECT_NAME}Depends DESTINATION cmake)

## ###################################################################
## Beautifying
## ###################################################################

mark_as_advanced(\${PROJECT_NAME}_VERSION_MAJOR)
mark_as_advanced(\${PROJECT_NAME}_VERSION_MINOR)
mark_as_advanced(\${PROJECT_NAME}_VERSION_BUILD)

mark_as_advanced(Qt5Concurrent_DIR)
mark_as_advanced(Qt5Core_DIR)
mark_as_advanced(Qt5Declarative_DIR)
mark_as_advanced(Qt5Gui_DIR)
mark_as_advanced(Qt5Network_DIR)
mark_as_advanced(Qt5Qml_DIR)
mark_as_advanced(Qt5Quick_DIR)
mark_as_advanced(Qt5QuickTest_DIR)
mark_as_advanced(Qt5Script_DIR)
mark_as_advanced(Qt5Test_DIR)
mark_as_advanced(Qt5Widgets_DIR)
mark_as_advanced(Qt5Xml_DIR)

mark_as_advanced(CMAKE_AR)
mark_as_advanced(CMAKE_BUILD_TYPE)
mark_as_advanced(CMAKE_INSTALL_PREFIX)
mark_as_advanced(CMAKE_OSX_ARCHITECTURES)
mark_as_advanced(CMAKE_OSX_DEPLOYMENT_TARGET)
mark_as_advanced(CMAKE_OSX_SYSROOT)

## ###################################################################
## Packaging
## ###################################################################

include(InstallRequiredSystemLibraries)

set(CPACK_PACKAGE_VERSION_MAJOR "\${\${PROJECT_NAME}_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "\${\${PROJECT_NAME}_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "\${\${PROJECT_NAME}_VERSION_PATCH}")

include(CPack)

######################################################################
### CMakeLists.txt ends here
